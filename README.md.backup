# «Хранение в K8s. Часть 2»

### Задание 1

*Создать Deployment приложения, использующего локальный PV, созданный вручную.*

**Создать Deployment приложения, состоящего из контейнеров busybox и multitool.*

*Создать PV и PVC для подключения папки на локальной ноде, которая будет использована в поде.*

*Продемонстрировать, что multitool может читать файл, в который busybox пишет каждые пять секунд/ в общей директории.*

**Удалить Deployment и PVC. Продемонстрировать, что после этого произошло с PV. Пояснить, почему.*

*Продемонстрировать, что файл сохранился на локальном диске ноды. Удалить PV. Продемонстрировать что произошло с файлом после удаления PV. Пояснить, почему.*

*Предоставить манифесты, а также скриншоты или вывод необходимых команд.*

_____________


Пишем манифест Deployment приложения, состоящего из контейнеров busybox и multitool. 

![](img/1.png)

Применяем:

![](img/2.png)


![](img/3.png)

Проверяем его статус: 

![](img/4.png)

Статус Pending.

Пишем манифест PV и PVC для подключения папки на локальной ноде, которая будет использована в POD.

![](img/5.png)

![](img/6.png)

Применяем:

![](img/7.png)


Проверяем статусы: 


![](img/8.png)

Проверим статус пода, который ожидал создания PVC с именем pvc-vol:

![](img/9.png)

Проверим, возможность чтения фала multitool , в который busybox пишет данные каждые пять секунд в общей директории. 

Проверим доступность файла из контейнера:

![](img/10.png)

![](img/11.png)

Mожно посмотреть логи самого контейнера в поде: 

![](img/12.png)


Удаляем Deployment и PVC и проверяем:

![](img/13.png)

PV перешел в состояние Failed, т.к. контроллер PV не сумел удалить данные по пути /data/pvc-first. По умолчанию он может удалить
только данные по пути /tmp. Если бы там находились файлы, то они были бы утеряны.


Если PVC не удалять, а удалить только Deployment, то PV будет в статусе “Bound” 

![](img/14.png)

Проверям, сохранился ли файл на локальном диске ноды: 

![](img/15.png)

Файл присутствует в директории /data/pvc-first.

Удаляем PV: 

![](img/16.png)

После удаления PV, файл в директории /data/pvc-first останется на месте из-за особенностей работы контроллера PV с hostPath. В
случае если в манифесте PV политика persistentVolumeReclaimPolicy будет установлена в Recycle, то файл будет удален. 

### Задание 2

Создаем Deployment приложения, которое может хранить файлы на NFS с динамическим созданием PV.

Устанавливаем и настраиваю NFS-сервер на ноде с MicroK8S: 

![](img/17.png)

Пишем манифест Deployment приложения состоящего из multitool: 

![](img/18.png)

Проверяем PV,на то, что он создан автоматически:

![](img/19.png)

Пишем манифест PVC и применим его:

![](img/20.png)

Проверим возможность чтения и записи файла изнутри пода. Для этого войдем в оболочку контейнера пода и создам файл: 

![](img/21.png)


![](img/22.png)

Через describe pv проверю, по какому пути смонтирована NFS директория.

Если перейти в эту директорию, то можно увидеть созданный из контейнера пода файл: 

![](img/23.png)

Это говорит о том, что NFS работает и из пода файл доступен для чтения и записи. 

Ссылка на манифесты

https://github.com/dmistus/Kubernetes_07/tree/main/src






















